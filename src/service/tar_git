#!/bin/bash
# Copyright (C) 2013 Jolla Ltd.
# Contact: Islam Amer <islam.amer@jollamobile.com>
# All rights reserved.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

exec 1>&2
echo "$@"

export LANG=en_US.utf8
export LC_CTYPE="en_US.utf8"
export LC_ALL=
export GREP_COLORS=never

if [ -f /etc/sysconfig/proxy ]; then
  source /etc/sysconfig/proxy
  export http_proxy=$HTTP_PROXY
  export https_proxy=$HTTPS_PROXY
  export no_proxy=$NO_PROXY
  export GIT_PROXY_COMMAND
fi

SERVICE='tar_git'
CACHE_DIR=''
CACHE_DIR_YOCTO=''
SITE_CONF_YOCTO=''

set_default_params () {
  MYURL=""
  BRANCH=""
  REVISION=""
  MYOUTDIR=""
  TOKEN=""
  TOKENCHRE="^.*$"
  DEBIAN="N"
  FILESERVER=""
  DUMB="N"
  REPO_NAME=""
  CLONE_NAME=""
  SVC_NAME=""
  REPO_PATH=""
}

get_config_options () {
  # config options for this host ?
  if [ -f /etc/obs/services/$SERVICE ]; then
    . /etc/obs/services/$SERVICE
  fi
  # config options for this user ?
  if [ -f "$HOME"/.obs/$SERVICE ]; then
    . "$HOME"/.obs/$SERVICE
  fi
  export CACHE_DIR CACHE_DIR_YOCTO SITE_CONF_YOCTO
}

usage () {
    echo 'Usage: $SERVICE --url $URL --outdir $OUT [--branch $BRANCH] [--revision $REVISION] [--token $TOKEN] [--debian Y|N]'
    echo '	--url		url of git repo to clone from. Can be remote http[s]/SSH or local dir'
    echo '	--outdir	path to output directory'
    echo '	--branch	name of branch to use. If not specified default branch (or currently checked out one) will be used'
    echo '	--revision	sha1 of a commit or a tag name to use for creating the package and the changelog'
    echo '	--token		a token that should exist in tag names and changelog entry headers to enable handling them'
    echo '	--debian	Y/N switch to turn on debian packaging support (defaults to N)'
    echo '	--fileserver    baseurl of a location for fetching files listed in a _sources file in the rpm subdir'
    echo '	--dumb          Y/N switch to take content of revision as-is without automatic processing'
    echo '	--manifest      check for a specific manifest file name and process it with repo tool'
    echo '	--bitbake       run bitbake fetchall for this image using bblayers.conf and local.conf from packaging'
    echo '	--distro        run bitbake fetchall with this distro setting'
    echo '	--machine       run bitbake fetchall with this machine setting'
    echo '	--pin           set revision of related repositories (for bitbake recipes and repo manifest, [name]:[revision])'
    echo 'If your git repo has multiple spec files in the rpm subdirectory set the env variable OBS_SERVICE_PACKAGE '
    echo 'to the name of the one you want to use (without .spec suffix)'
    echo 'The _sources file is expected to contain lines of <sha1sum> <subdir>/<filename>'
    echo 'The URI obtained by joining the fileserver baseurl and <subdir>/<filename> should be accessible by cp, curl or rsync'
}

parse_params () {
  while test $# -gt 0; do
    case $1 in
      *-url)
        MYURL="$2"
        shift
      ;;
      *-outdir)
        MYOUTDIR="$2"
        shift
      ;;
      *-branch)
        BRANCH="$2"
        shift
      ;;
      *-revision)
        REVISION="$2"
        shift
      ;;
      *-token)
        TOKEN="$2"
        shift
      ;;
      *-dumb)
        DUMB="$2"
        shift
      ;;
      *-manifest)
        MANIFEST="$2"
        shift
      ;;
      *-bitbake)
        BITBAKE="$2"
        shift
      ;;
      *-distro)
        DISTRO="$2"
        shift
      ;;
      *-machine)
        MACHINE="$2"
        shift
      ;;
      *-debian)
        DEBIAN="$2"
        shift
      ;;
      *-fileserver)
        FILESERVER="$2"
        shift
      ;;
      *-pin)
        PINS="$2 $PINS"
        shift
      ;;
      *-help)
        usage
        exit 0
      ;;
      *)
        echo "Unknown parameter: $1"
        usage
        exit 1
      ;;
    esac
    shift
  done
}

error () {
  echo "ERROR: $*"
  # stop
  set -e
  exit 1
}

safe_run () {
  if ! "$@"; then
    error "$* failed; aborting!"
  fi
}

sanitise_params () {

  # make sure no sneaky params were passed to the service

  local regex1='^[a-z]+://([[:alnum:]_.-]+@)?[[:alnum:]_./~:%-]+$'      # url
  local regex2='^([[:alnum:]_.-]+@)?[[:alnum:]_.-]+:[[:alnum:]_./-]+$' # ssh
  if [[ -z "$MYURL" || ! "$MYURL" =~ $regex1|$regex2 && ! -d "$MYURL" ]]; then
    echo "invalid or empty checkout URL was given via --url parameter!"
    usage
    exit 1
  fi
  if [ -z "$MYOUTDIR" ]; then
    echo "no output directory is given via --outdir parameter!"
    usage
    exit 1
  fi

  MYOUTDIR_TMP=$(readlink -f $MYOUTDIR)
  [[ -d $MYOUTDIR_TMP ]] || error "outdir '$MYOUTDIR' doesn't exist"
  MYOUTDIR=$MYOUTDIR_TMP

  local regex="[A-Za-z0-9_./-]+"
  if [ ! -z "$BRANCH" ] && [[ ! "$BRANCH" =~ $regex ]]; then
    echo "invalid branch name"
    usage
    exit 1
  fi

  local regex="[A-Za-z0-9_./-]+"
  if [ ! -z "$REVISION" ] && [[ ! "$REVISION" =~ $regex ]]; then
    echo "invalid revision"
    usage
    exit 1
  fi

  local regex="[A-Za-z0-9_./-]+"
  if [ ! -z "$TOKEN" ] && [[ ! "$TOKEN" =~ $regex ]]; then
    echo "invalid token"
    usage
    exit 1
  fi
  if [ ! -z "$TOKEN" ]; then
    TOKENCHRE="^\[.*?$TOKEN.*?\].+$"
  fi

  local regex="[Y|N]"
  if [ ! -z "$DEBIAN" ] && [[ ! "$DEBIAN" =~ $regex ]]; then
    echo "invalid debian switch"
    usage
    exit 1
  fi

  if [ ! -z "$DUMB" ] && [[ ! "$DUMB" =~ $regex ]]; then
    echo "invalid dumb switch"
    usage
    exit 1
  fi

}

find_spec_file () {

  SPECFILE="$(find rpm/ packaging/ "$MYOUTDIR/.." -maxdepth 1 -xdev -type f -name '*.spec' 2>/dev/null)"

  if [[ "$(echo $SPECFILE | wc -w)" -gt 1 ]]; then
      SPECFILE=$(find rpm/ packaging/ "$MYOUTDIR/.." -maxdepth 1 -xdev -type f -name "$OBS_SERVICE_PACKAGE".spec 2>/dev/null)
  fi

  [[ "$(echo $SPECFILE | wc -w)" -eq 1 ]] || { echo "no spec file found"; return 1; }

  cp -v "$SPECFILE" "$MYOUTDIR/"
  SPECFILE="$(readlink -ne $MYOUTDIR/$(basename $SPECFILE))"

}

find_changes_file () {

  CHANGESFILE="$(find rpm/ packaging/ "$MYOUTDIR/.." -maxdepth 1 -xdev -type f -name '*.changes' 2>/dev/null)"

  [[ "$(echo $CHANGESFILE | wc -w)" -le 1 ]] || error "Need single changes file in rpm"

  [[ -z $CHANGESFILE ]] || cp -v "$CHANGESFILE" ..
}

find_other_files () {

  for i in $(find rpm/ packaging/ "$MYOUTDIR/.." -maxdepth 1 -xdev -type f -not -name '*.changes' -not -name '*.spec' -not -name '_service' -not -name '.?*' 2>/dev/null); do

    cp -v $i $MYOUTDIR/

  done

}

get_spec_field() {
    local value
    # Allow for spaces between field name and colon, strip whitespace from result
    value="$(grep "^$1[[:space:]]*:" $SPECFILE | sort | head -n 1 | cut -d: -f2- | tr -d ' \t')"
    resolve_spec_macro "$value"
}

expand_spec_file() {

  [[ -z $SPECFILE ]] && return
  local inc incfile
  grep -Po "^%include[[:space:]]+.*$" "$SPECFILE" | while read inc; do
    incfile="$( echo $inc | awk '{ print $2 }')"
    incfile="$(resolve_spec_macro "$incfile")"
    inc="$(echo $inc | sed -e 's|[\/&]|\\&|g')"
    sed -i -e "/^$inc/ {
r $incfile
d }" "$SPECFILE"
  done
}

find_package_name () {

  [[ -z "$SPECFILE" ]] || PACKAGE_NAME="$(get_spec_field Name)"
  [[ -n "$PACKAGE_NAME" ]] || PACKAGE_NAME="$OBS_SERVICE_PACKAGE"
  [[ -n "$PACKAGE_NAME" ]] || PACKAGE_NAME="$CLONE_NAME"
  [[ -z "$PACKAGE_NAME" ]] && error "couldn't determine package name from spec file or environment"

}

find_deb_package_name() {

  DEB_PACKAGE_NAME=$(grep -i "Source: \(.*\)" debian/control | head -n 1 | gawk '{ print $2 }')
  [[ -z $DEB_PACKAGE_NAME ]] && error "couldn't determine Debian package name from control file"

}

resolve_spec_macro () {
  # takes one argument and recursively resolves any macros in it
  local query value expand macro_name macro result
  query="$1"
  expand="$1"
  # if the query matches macro definition format
  case "$query" in
    *%{*}*)
         # resolve multiple macros on the same line
         for macro in $(echo $query | grep -o '%{[^}]*}'); do
             # extract the macro name
             macro_name=$(echo $macro | sed -e 's/^%{\(.*\)}$/\1/')
             # extract the macro value from a definition
             value="$(grep -P "%define\s+$macro_name\s+" $SPECFILE | head -n 1 | gawk '{ print $3 }')"
             # some macros are implicitly defined, these are the most common
             if [ -z "$value" ] ; then
                 if [ x"$macro_name" = x"version" ]; then
                     find_version "$SPECFILE"
                     value="$VERSION"
                 elif [ x"$macro_name" = x"name" ]; then
                     find_package_name "$SPECFILE"
                     value="$PACKAGE_NAME"
                 fi
             fi
             # replace the macro with its expansion
             expand="$(echo "$query" | sed -e "s#%{$macro_name}#$value#g")"
         done
    ;;
  esac

  # if no macros were resolved return the result
  if [ "x$query" = "x$expand" ] ; then
      result="$expand"
  else
    # if a macro was resolved make sure any nested macros are expanded as well
      result="$(resolve_spec_macro "$expand")"
  fi

  echo "$result"
}

find_version () {
  
  [[ -z $SPECFILE ]] || VERSION="$(get_spec_field Version)"
  [[ -z $VERSION ]] && { echo "couldn't determine version from spec file"; return 1; }
}

find_compression () {

  [[ -z "$SPECFILE" ]] && { COMPRESS_COMMAND="gzip -n -1"; COMPRESS_EXT="tar.gz"; return 0; }

  SOURCE_FILENAME="$(get_spec_field Source)"
  [[ -z "$SOURCE_FILENAME" ]] && SOURCE_FILENAME="$(get_spec_field "Source[0-9]*")"

  case "$SOURCE_FILENAME" in
      *.tar.gz)
          COMPRESS_COMMAND="gzip -n -1"
          COMPRESS_EXT="tar.gz"
          ;;
      *.tgz)
          COMPRESS_COMMAND="gzip -n -1"
          COMPRESS_EXT="tgz"
          ;;
      *.tar.bz2)
          COMPRESS_COMMAND="bzip2 -1"
          COMPRESS_EXT="tar.bz2"
          ;;
      *.tar.xz)
          COMPRESS_COMMAND="xz -1"
          COMPRESS_EXT="tar.xz"
          ;;
      *)
          error "Source filename in .spec must end in .tar.gz, .tgz, .tar.bz2 or .tar.xz"
          ;;
  esac
}

get_tagver () {

    local tag=$1 tagver

    if [ $(echo $tag | grep "/") ] ; then
      tagver=$(echo $tag | cut -f2 -d'/')
    # some people like to prefix versions with a v
    elif [ $(echo $tag | grep -Po "^v") ]; then
      tagver=$(echo $tag | cut -f2 -d'v')
    else
      tagver=$tag
    fi

    if [ $(echo $tagver | grep -Po "\-[a-zA-Z0-9]+?$") ] ; then
      tagver=$(echo $tagver | cut -f1 -d'-')
    fi

    echo $tagver
}

is_valid_tagver () {

  local tagver=$1
  test -z "$tagver" && return 1 

  #valid_tagver="$(echo $tagver | grep -Po '([0-9]+\.+?){1,5}([0-9]+)')"
  local valid_tagver="$(echo $tagver | grep -Po '^([0-9]+\.*?){1,9}[a-zA-Z0-9.~+]*?$')"

  test "$tagver" = "$valid_tagver"
  return $?

}

get_changes_header () {

  local ref=$1

  eval $(git show --no-patch $ref --pretty=format:'local cI="%ci" an="%an" ae="%ae"')
  local cd="$(date --date="$cI" '+%a %b %d %Y %H:%I %z')"
  echo "* $cd $an <$ae> - $VERSHA"

}

dash_trim () {
  # and workaround for github breaking the subject line with ... automatically
  # in pull requests
  sed -e '/^\s*$/d' -e 's/^/- /g' -e 's/^-\s*-/  -/g' -e 's/%/%%/g'
}

grep_entry () {
  grep -Po '^\[.+\].*$'
}

generate_changes () {

  test -f "$SPECFILE" || return

  if test -n "$MANIFEST"; then
    pushd .repo/manifests >/dev/null
  fi

  local ch cD cb ct ci an ae ref oldci oldct=0
  declare -A chs
  declare -a revlist

  sed -i -e '/%changelog/,$d' "$SPECFILE"
  echo -e "\n%changelog" >> "$SPECFILE"

  while IFS='|' read ct ci an ae ref; do

    if [ "$oldct" -gt "$ct" ]; then
      ct="$oldct"
      ci="$oldci"
    else
      oldct="$ct"
      oldci="$ci"
    fi

    get_versha $ref
    cD="$(date --date="$ci" '+%a %b %d %Y %H:%I %z')"
    revlist+=($ref)
    chs[$ref]="* $cD $an <$ae> - $VERSHA"

  done < <(git log --reverse --date-order HEAD --pretty=tformat:'%ct|%ci|%an|%ae|%H')

  for (( idx=${#revlist[@]}-1 ; idx>=0 ; idx-- )) ; do
    ref=${revlist[$idx]}
    echo "${chs[$ref]}" >> "$SPECFILE"
    git log --no-walk --pretty="%B" $ref | grep -F "$TOKEN" | dash_trim >> "$SPECFILE"
    echo >> "$SPECFILE"
  done

  if test -n "$MANIFEST"; then
    popd >/dev/null 
  fi

}

changes_to_debian () {
  local LINE
  local ENTRY_VERSION ENTRY_SIGN

  # Always start with a dummy entry to set the version
  echo "$DEB_PACKAGE_NAME ($VERSHA-1) unstable; urgency=low"
  echo
  echo "  * Generated Debian source package from git"
  echo "    $MYURL"
  echo
  echo " -- Source service <service@localhost> " $(date -R)

  if [ ! -f "$1" ]; then
    # nothing to do
    return 0
  fi

  while read LINE; do
    case "$LINE" in
      # header
      \*\ *) # the sed expressions: first strip everything before the version
             # then delete trailing whitespace
             # then add -1 to the version if it has no - in it
             ENTRY_VERSION=$(echo "$LINE" | sed -e 's/.* - \s*//' -e 's/\s*$//' -e '/^[^-]*$/s/$/-1/')
             ENTRY_SIGN=$(echo "$LINE" | sed -e 's/^. \(...\) \(...\) \(..\) \(....\) \(.*\) - .*/ -- \5  \1, \3 \2 \4 00:00:00 +0000/')
             # blank line between entries
             echo
             echo "$DEB_PACKAGE_NAME ($ENTRY_VERSION) unstable; urgency=low"
             echo
             ;;
      # change item
      \-\ *) echo "$LINE" | sed 's/^-/  */'
             ;;
      # change item continuation
      \ *) echo "  $LINE"
           ;;
      # end of one entry
      "") echo
          echo "$ENTRY_SIGN"
          ;;
    esac
  done < "$1"
}

git_ls_files () {

    if test -n "$MANIFEST"; then

      find * -xdev -not -path "*/.git*" -print0 | sort -z
      return 
    fi

    # generate list of files to include in tarball
    git ls-files -z --with-tree=HEAD | sed -z -e '/^rpm\//d'

    # include submodules in the list
    git submodule --quiet foreach --recursive 'git ls-files -z --with-tree=$sha1 | sed -z -e "s#^#$toplevel/$path/#"' | sed -z -e "s#^$PWD/##"

    [ -f .tarball-version ] && echo .tarball-version

}

cache_prefetch () {

  NAME=$1
  URL=$2

  OLDUMASK=`umask`
  umask 0000

  if [ x"$CACHE_DIR" = "x" ]; then
      return
  fi

  if [ ! -d $CACHE_DIR ]; then
      mkdir -p $CACHE_DIR || error "$CACHE_DIR doesn't exist ..."
  fi

  SERVER_SUBDIR="$(dirname $URL)"
  [[ "$SERVER_SUBDIR" = "." ]] && SERVER_SUBDIR=$URL
  
  SERVER_DIR="$CACHE_DIR/$(echo $SERVER_SUBDIR | sed -e 's/\//_/g' -e 's/:/_/g')"
  mkdir -p "$SERVER_DIR"
  CLONE_DIR="$SERVER_DIR/$NAME"

  if test \! -d "$CLONE_DIR"; then
      mkdir -p "$CLONE_DIR"
      pushd "$CLONE_DIR" >/dev/null
      COMM="git clone -q --config remote.origin.fetch="+refs/changes/*:refs/remotes/changes/*" --mirror "$URL" ."
      test -n "$MANIFEST" && COMM="repo init --mirror --manifest-url=$MYURL --manifest-branch=$BRANCH --manifest-name=$MANIFEST"
      flock -w 7200 -x "$CLONE_DIR" $COMM
      popd >/dev/null
  else
      pushd "$CLONE_DIR" >/dev/null
      git config --get-regexp remote.origin.fetch '^\+refs\/changes/\*\:refs\/remotes\/changes\/\*' || git config --add remote.origin.fetch "+refs/changes/*:refs/remotes/changes/*"
      test -n "$MANIFEST" || flock -w 7200 -x "$CLONE_DIR" git fetch -q --prune --all --force
      popd >/dev/null
  fi

   if test -n "$MANIFEST"; then
     pushd "$CLONE_DIR" >/dev/null
     flock -w 7200 -x "$CLONE_DIR" repo sync --force-broken --optimized-fetch --fetch-submodules --jobs=2
     popd >/dev/null
     REPOREF="--reference=$CLONE_DIR"
     return
   fi


  umask $OLDUMASK
  # override url with the fresh local cache
  URL="$CLONE_DIR"
}

handle_submodules() {
 
  if [ -f .gitmodules ] ; then
    
    local gitconf submod url ourl path URL REFERENCE

    git submodule sync
    for submod in $(git config -f .gitmodules -l | grep -P 'submodule\..*\.url' | xargs); do
      url=$(echo $submod | cut -d= -f2)
      name=$(echo $submod | cut -d= -f1 | cut -d. -f2)
      path=$(git config -f .gitmodules --get submodule.$name.path | cut -d= -f2)
      gitconf=".git/modules/$path/config"

      ourl=$url
      URL=$url
      cache_prefetch $name $URL
      url=$URL
    
      REFERENCE=""
      [ -d "$url" ] && REFERENCE="--reference $url"
      
      git submodule --quiet update --checkout --init --force $REFERENCE -- $path
      git config -f $gitconf --get-regexp remote.origin.fetch '^\+refs\/changes/\*\:refs\/remotes\/changes\/\*' || git config -f $gitconf --add remote.origin.fetch "+refs/changes/*:refs/remotes/changes/*"

      test -d $path || error "Something went wrong handling submodule $name from $ourl"

      pushd $path >/dev/null
        handle_submodules
      popd >/dev/null
     
    done
  fi
}

parse_url () {

  # parse git URLs of various forms:
  # ssh://[user@]host.xz[:port]/path/to/repo.git/
  # git://host.xz[:port]/path/to/repo.git/
  # http[s]://host.xz[:port]/path/to/repo.git/
  # ftp[s]://host.xz[:port]/path/to/repo.git/
  # rsync://host.xz/path/to/repo.git/
  # [user@]host.xz:path/to/repo.git/

  # remove possible trailing slash
  TEMP_URL="${MYURL%/}"
  # remove possible trailing .git
  TEMP_URL="${TEMP_URL%.git}"
  # extract git repo name
  REPO_NAME="${TEMP_URL##*/}"
  # remove repo name from url
  TEMP_URL="${TEMP_URL%/$REPO_NAME}"
  # extract possible scheme from url
  SCHEME="${TEMP_URL%://*}"
  # remove possible scheme from url
  TEMP_URL="${TEMP_URL#*://}"
  if test "$SCHEME" = "$TEMP_URL"; then
    # no scheme
    SCHEME="ssh"
    REPO_PATH="${TEMP_URL#*:}"
    REPO_URL="${TEMP_URL%:$REPO_PATH}"
  else
    REPO_PATH="${TEMP_URL#*/}"
    REPO_URL="${TEMP_URL%/$REPO_PATH}"
  fi
  # remove possible username / password
  REPO_URL="${REPO_URL##*@}"
  # remove possible port
  REPO_URL="${REPO_URL%:*}"
  # extract service name
  SVC_NAME="${REPO_URL%.*}"
  SVC_NAME="${SVC_NAME#*.}"
  CLONE_NAME="$REPO_NAME"

}

clone () {

  echo "Handling $CLONE_NAME"
  URL=$MYURL
  cache_prefetch $CLONE_NAME $URL

  if test -n "$MANIFEST"; then
    run_android_repo_service
    return
  fi

  MYURL=$URL

  if [ -d $CLONE_NAME ]; then
    pushd "$CLONE_NAME" >/dev/null
      git fetch -q -p
      [ $? -eq 0 ] || error "couldn't update $CLONE_NAME"
      git pull
      #[ $? -eq 0 ] || error "couldn't update $CLONE_NAME"
    popd >/dev/null
  else
    git clone --config remote.origin.fetch="+refs/changes/*:refs/remotes/changes/*" -q "$MYURL" "$CLONE_NAME"
    [ $? -eq 0 ] || error "couldn't clone $CLONE_NAME"
    git --git-dir="$CLONE_NAME"/.git fetch -q --prune --all --force
  fi

  pushd $CLONE_NAME >/dev/null

  # initialize submodules if any
  handle_submodules

  if [ ! -z "$BRANCH" ] ; then
      git fetch origin "$BRANCH" && git checkout -f FETCH_HEAD
      [ $? -eq 0 ] || error "couldn't checkout branch $BRANCH"
  fi

  if [ ! -z "$REVISION" ] ; then
      git checkout --detach "$REVISION"
      [ $? -eq 0 ] || error "couldn't checkout revision $REVISION"
  fi

  if [ -z "$BRANCH" ]; then
      BRANCH="$(git branch | grep '*' | gawk '{ print $2 }' | sed -e 's/(//')"
  fi

  #git submodule update --recursive --checkout --init --force
  handle_submodules

  popd >/dev/null
}


set_versha () {

  if test -n "$VERSHASET"; then
    return
  fi

  if test -n "$MANIFEST"; then
    pushd .repo/manifests >/dev/null
  fi

  declare -g -A vershas
  local count=0 tagver="0.0" nref="" default_ref our_ref ref merge_base
  default_ref="$(git name-rev --name-only --no-undefined --always origin/HEAD 2>/dev/null)"
  test -z "$default_ref" && default_ref="$(git name-rev --name-only --no-undefined --always $(git ls-remote origin HEAD | cut -f1))"
  our_ref="$(git name-rev --name-only --no-undefined --always HEAD 2>/dev/null)"
  ref="$default_ref"
  merge_base="$(git rev-parse --short $(git merge-base $default_ref HEAD))"
  
  while IFS="|" read rev ps decs; do
    count="$((count+1))"
    decs="${decs// /}"
    decs="${decs#(}"
    decs="${decs%)}"
    # if one of this rev's parents was the merge-base then we've left the default ref
    # unset ref to look for alternate ref name
    for p in $ps; do
      test "$p" = "$merge_base" && ref=""
    done
  
    for dec in ${decs//,/ }; do
      case "$dec" in
        tag:*)
          tag="$(get_tagver "${dec#tag:}")"
          if is_valid_tagver "$tag" ; then
            tagver="$tag"
            count=0
          fi
        ;;
        changes/*)
          test -z "$ref" && nref="${dec//[\/-]/.}"
        ;;
      esac
    done
  
    # check if there is a better name than a possible changes/ 
    if test -z "$ref"; then
      pnref="$(git name-rev --name-only --no-undefined --always --refs='origin/*' "$rev")"
      if test "$pnref" != "$rev"; then
        pnref="${pnref#origin/}"
        pnref="${pnref%%~*}"
        nref="${pnref//[\/-]/.}"
      fi
      # fallback if we don't have a name yet
      test -z "$nref" && nref="detached"
    fi
  
    ref="${ref#remotes/origin/}"
    ref="${ref%%~*}"
    ref="${ref//[\/-]/.}"

    vershas[$rev]="$tagver.$count+${ref}${nref}.$rev"
  done < <(git log --reverse --decorate=short --pretty=tformat:'%h|%p|%d' --topo-order HEAD)

  VERSHASET="YES"

  if test -n "$MANIFEST"; then
    popd >/dev/null 
  fi
}

get_versha () {

  local ref="$1"
  SHORTREV="$(git rev-parse --short $ref)"
  VERSHA="${vershas[$SHORTREV]}"
  VERSION="${VERSHA%.*+*}"
  COUNT="${VERSHA%+*}"
  COUNT="${COUNT#${VERSION}.}"

}

set_spec_version () {

  [[ -z "$SPECFILE" ]] && return
  # add matching version to the spec file
  sed -i -e "s/^Version:.*$/Version:    $VERSHA/g" $SPECFILE

  sed -i -e "s/@MAJOR@/$VERSION/" $SPECFILE
  sed -i -e "s/@MINOR@/$COUNT/" $SPECFILE
  sed -i -e "s/@REV@/$SHORTREV/" $SPECFILE

  if [ ! "x$RELEASE" = "x" ]; then
    sed -i -e "s/^Release:.*$/Release:    $RELEASE/g" $SPECFILE
    SPECRELEASE=$RELEASE
  fi
}

rpm_pkg () {
  if test -n "$MANIFEST"; then
    pushd .repo/manifests >/dev/null
  fi

  find_spec_file
  expand_spec_file "$SPECFILE"
  find_compression "$SPECFILE"
  find_package_name "$SPECFILE"
  echo "package name is $PACKAGE_NAME"
  #find_changes_file
  find_other_files

  get_versha HEAD

  if test -n "$MANIFEST"; then
    popd >/dev/null 
  fi

  set_spec_version
  # add tarball version file for some packages that use auto foo
  if [ -f git-version-gen ] || [ -f build-aux/git-version-gen ]; then
     echo -n $VERSHA > .tarball-version
  fi

  #tar --mtime '2000-01-01'
  git_ls_files | tar --null --no-recursion -c --transform "s#^#$PACKAGE_NAME-$VERSHA/#S" -T - | $COMPRESS_COMMAND > $MYOUTDIR/$PACKAGE_NAME-$VERSHA.$COMPRESS_EXT

  git diff-tree --root --no-commit-id --name-only -r HEAD > $MYOUTDIR/$PACKAGE_NAME-$VERSHA.changed_files
}

run_android_repo_service () {

  local REV PRJN BR CHPA RC
  set -e 
  mkdir -p $CLONE_NAME
  pushd $CLONE_NAME >/dev/null

  repo init --manifest-url=$MYURL --manifest-branch=$BRANCH --manifest-name=$MANIFEST $REPOREF || :
  cd .repo/manifests
      git fetch origin "+refs/changes/*:refs/remotes/changes/*"
      REVISION="$(git rev-parse $REVISION)"
  cd ../..
  repo init --manifest-branch=$REVISION --manifest-name=$MANIFEST
  repo sync --force-broken --optimized-fetch --fetch-submodules --jobs=2

  for pin in $PINS; do
    PRJN="$(echo $pin | cut -d":" -f1)"
    if test -n "$(repo list -n | grep -w $PRJN)" ; then
      BR="$(echo $pin | cut -d":" -f2)"
      RC="$(echo $BR | cut -d"/" -f1,2)"
      if test "$RC" == "refs/changes"; then
        CHPA="$(echo $BR | cut -d"/" -f4,5)"
      fi
      REV="$(echo $pin | cut -d":" -f3)"
      REMOTES="$(repo forall $PRJN -c git remote -v | grep fetch | gawk '{ print $1 }' | xargs)"
      for r in $REMOTES; do
          repo forall $PRJN -c git fetch $r "+refs/changes/*:refs/remotes/changes/*" || :
      done
      repo forall $PRJN -c git checkout $REV
    fi
  done

  repo manifest --revision-as-HEAD --output-file=$MYOUTDIR/$MANIFEST

  popd >/dev/null
  set +e
}

download_files () {

# This function implements a download service that gets the filenames
# to download from a _sources file which has a format like this :
# <sha1sum> <subdir>/<filename>
# dbf1462a735c88716cdff861dd3dcb8553df1986  foo/bar

# The reasoning behind this is that that git is not good at storing large
# binary blobs, so they are stored on a fileserver, but we still want to
# track the meta information in git. In the future something like git annex
# might be useful for this.

  # If no file server is configured we do nothing
  if [ x"$FILESERVER" = "x" ]; then
    return 0
  fi

  # if there is no _sources files nothing to do
  if [ -f "$MYOUTDIR"/_sources-$OBS_SERVICE_PACKAGE ]; then
      sources="$MYOUTDIR"/_sources-$OBS_SERVICE_PACKAGE
  elif [ -f "$MYOUTDIR"/_sources ]; then
      sources="$MYOUTDIR"/_sources
  else
    return 0
  fi

  pushd "$MYOUTDIR" >/dev/null

  # if fileserver is a local directory or NFS share
  if [ -d "$FILESERVER" ]; then
    fetch="cp"
    out="."

  # if fileserver is rsync
  elif [[ "$FILESERVER" =~ ^rsync ]]; then
    fetch="rsync --no-motd -zqS"
    out="."

  # if fileserver is http/https
  elif [[ "$FILESERVER" =~ ^http ]]; then
    fetch="curl -sSnf --retry 3 -O"
    out=""
  fi

  count=499
  # for each file requested
  cat $sources | while read line; do
    line="$(echo $line | tr -s '[:space:]' ' ')"
    if [[ $line =~ ^\ *$ ]]; then
      continue
    fi
    # workout the count, uri and expected sha1sum
    count=$(( count + 1 ))
    expected_sha1sum="$(echo "$line" | cut -f1 -d' ')"
    file_path="$(echo "$line" | cut -f2 -d' ')"
    file_name="$(basename "$file_path")"
    file_uri="$FILESERVER"/"$file_path"

    # guard against sneaky relatives and symlinks
    if [ -f "$file_uri" ] ; then
      file_uri="$(readlink -nf "$file_uri")"
      if [ ! x"$file_uri" = x"$FILESERVER"/"$file_path" ]; then
        error "bad file path specificied '$file_uri' != '$FILESERVER/$file_path' "
      fi
    fi

    # get the file and calculate its sha1sum after download
    $fetch "$file_uri" $out || error "'$file_uri' could not be fetched"
    download_sha1sum="$(sha1sum "$file_name" | cut -f1 -d' ')"

    # if the file sha1sum is not as expected either the file on the server 
    # or after download is corrupted or the user changed the file without
    # updating its data in git
    if [ ! x"$expected_sha1sum" = x"$download_sha1sum" ] ; then
      error "$file_path sha1sum doesn't match expected"
    fi

    # update the spec sources with the names of the downloaded files
    sed -i -e "s/@SOURCE$count@/$file_name/g" $MYOUTDIR/$(basename $SPECFILE)

  done

  popd >/dev/null
}

x_in () {
  for x in $1; do
    if [[ x"$x" = x"$2" ]] ; then
        exit 0
    fi
  done
  exit 1
}

# This function relies on the variables set by clone() and the .changes
# file created by generate_changes
try_debian_packaging() {

  if [ ! x"$DEBIAN" = "xY" ]; then
    return 0
  fi

  if [ ! -f "debian/control" ]; then
    return 0
  fi

  find_deb_package_name

  # generate "upstream" tarball for dpkg-source to diff against
  git_ls_files | tar --null --no-recursion -c --transform "s#^#${DEB_PACKAGE_NAME}-$VERSHA/#S" -T - | gzip -1 > $MYOUTDIR/${DEB_PACKAGE_NAME}_$VERSHA.orig.tar.gz

  # update debian/changelog from git log
  changes_to_debian "$CHANGESFILE" > debian/changelog.git
  if [ -f "debian/changelog" ]; then
    echo >> "debian/changelog.git"
    cat "debian/changelog" >> "debian/changelog.git"
  fi
  mv "debian/changelog.git" "debian/changelog"

  dpkg-source --format="3.0 (quilt)" -I -b .
}

source_checks () {

  # CHECK_PROJECTS set as space separated list in /etc/obs/services/tar_git or $HOME/.obs/tar_git
  # OBS_SERVICE_PROJECT set in env by bs_service
  ( x_in "$CHECK_PROJECTS" "$OBS_SERVICE_PROJECT" ) || return 0

  CV=$(head -n1 $CHANGESFILE | awk -F' - ' '{ print $2 }' | xargs)
  VER=$VERSHA
  if [ ! "x$SPECRELEASE" = "x" ]; then
    VER="${VERSHA}-${SPECRELEASE}"
  fi

  ERROR1='Version of latest changelog entry does not match tagged version.
This probably means you forgot to do at least one commit with proper syntax
since last tagged version. example: [anything] foo bar'

  [[ $VER = $CV ]] || error "$ERROR1"

}

try_bitbake () {
  set -e
  local REV PKGN BR oe CHPA RC

  mkdir -p build/conf
  test -d "$CACHE_DIR_YOCTO/cache" || mkdir -p "$CACHE_DIR_YOCTO/cache"
  test -f "$SITE_CONF_YOCTO" && cp "$SITE_CONF_YOCTO" build/conf/site.conf
  cat <<EOF >> build/conf/auto.conf
INHERIT += "buildhistory"
BUILDHISTORY_COMMIT = "1"
DL_DIR = "$CACHE_DIR_YOCTO/download"
SSTATE_DIR = "$CACHE_DIR_YOCTO/sstate"
FILESEXTRAPATHS_append = ":${TOPDIR}/conf"
INHERIT += "rm_work"
PERSISTENT_DIR = "$MYOUTDIR"
BB_GENERATE_MIRROR_TARBALLS = "1"
EOF


  cp "$MYOUTDIR"/*.diff "$MYOUTDIR"/*.patch build/conf/ || :
  #cp "$MYOUTDIR"/*.diff "$MYOUTDIR"/*.patch "$MYOUTDIR"/*.py "$MYOUTDIR"/run-ptest build/conf/ || :

  #if test -e "$MYOUTDIR"/layer.conf; then
  #  mkdir -p local/conf
  #  cp "$MYOUTDIR"/layer.conf local/conf/
  #  cp "$MYOUTDIR"/*.bb "$MYOUTDIR"/*.inc "$MYOUTDIR"/*.bbappend "$MYOUTDIR"/*.bbclass local/ || :

  #  echo 'BBLAYERS += " ${TOPDIR}/../local "' >> build/conf/bblayers.conf
  #fi
  #layertars=$(ls -1 "$MYOUTDIR"/layer-*.tar.* 2>/dev/null | wc -l)
  #if test "$layertars" -ge "1"; then
  #  mkdir -p local/
  #  tar -xvf "$MYOUTDIR"/layer-*.tar.* -C local/
  #  for layer in local/*; do
  #    if test -d $layer; then
  #        echo "BBLAYERS += \" \${TOPDIR}/../${layer} \"" >> build/conf/bblayers.conf
  #    fi
  #  done
  #  cat build/conf/bblayers.conf
  #fi

  if test -e "$MYOUTDIR"/bblayers.conf; then
    cp "$MYOUTDIR"/bblayers.conf "$MYOUTDIR"/local.conf build/conf/
    oe="$(find -path '*poky*' -name oe-init-build-env)"
    . $oe `pwd`/build
  elif test -e setup-environment; then
    EULA=1 DISTRO=$DISTRO MACHINE=$MACHINE source ./setup-environment build
    test -f setup-environment && EULA=1 DISTRO=$DISTRO MACHINE=$MACHINE source ./setup-environment build
  else
    echo "Need either bblayers.conf or setup-environment for bitbake"
  fi

  for pin in $PINS; do
    PKGN="$(echo $pin | cut -d":" -f1)"
    BR="$(echo $pin | cut -d":" -f2)"
    RC="$(echo $BR | cut -d"/" -f1,2)"
    if test "$RC" == "refs/changes"; then
        CHPA="$(echo $BR | cut -d"/" -f4,5)"
        echo "GERRIT_pn-${PKGN} = \"$CHPA\"" >> conf/gerrit.conf
    fi
    REV="$(echo $pin | cut -d":" -f3)"
    echo "SRCREV_pn-${PKGN}_forcevariable = \"$REV\"" >> conf/local.conf
    echo "SRCBRANCH_pn-${PKGN}_forcevariable = \"$BR\"" >> conf/local.conf

  done

  echo 'PACKAGE_CLASSES = "package_ipk"' >> conf/local.conf
  echo 'EXTRA_IMAGE_FEATURES += "package-management"' >> conf/local.conf

  cat conf/local.conf
  cat conf/auto.conf || :
  cat conf/site.conf || :
  cat conf/gerrit.conf || :
  touch conf/sanity.conf

  OLDUMASK=`umask`
  umask 0000
  mkdir -p "$CACHE_DIR_YOCTO/download" "$CACHE_DIR_YOCTO/sstate" "$CACHE_DIR_YOCTO/ccache" "$CACHE_DIR_YOCTO/cache"
  #flock -w 7200 -x "$CACHE_DIR_YOCTO" 
  #MACHINE=$MACHINE DISTRO=$DISTRO bitbake -c fetchall $BITBAKE buildtools-tarball virtual/nativesdk-libsdl nativesdk-packagegroup-sdk-host packagegroup-qt5-toolchain-target
  MACHINE=$MACHINE DISTRO=$DISTRO bitbake -c fetchall --continue universe || :
  umask $OLDUMASK

  buildhistory-collect-srcrevs -f >> conf/local.conf
  cp conf/bblayers.conf conf/local.conf conf/gerrit.conf conf/site.conf "$MYOUTDIR"/ || :
  set +e
}

main () {
  set_default_params
  get_config_options
  parse_params "$@"
  sanitise_params
  SRCDIR=$(pwd)
  cd "$MYOUTDIR"
  parse_url
  clone
  if [ x"$DUMB" = "xY" ]; then
    # Dumb mode is simple - take the content of the checkout and drop it in out dir
    cp -ar "$CLONE_NAME"/* "$MYOUTDIR"/
    return
  fi
  pushd "$CLONE_NAME" >/dev/null
  set_versha
  rpm_pkg
  generate_changes
  download_files
  try_debian_packaging
  if test -n "$BITBAKE"; then
    try_bitbake
  fi
  source_checks
  popd >/dev/null
}

main "$@"

exit 0
